plugins {
    id 'application'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}

repositories {
    mavenCentral()
}

ext {
    javaVersion = 22

    guavaVersion = '33.2.1-jre'
    jacksonVersion = '2.17.0'
    jfreeChartVersion = '1.0.19'
    jtransformsVersion = '3.1'
    weldVersion = '6.0.0.Beta1'

    lombokMapStructBindingVersion = '0.2.0'
    lombokVersion = '1.18.34'
    mapStructVersion = '1.6.0.Beta1'

    assertjVersion = '3.26.3'
    junitVersion = '5.11.0-M1'
}

dependencies {
    implementation "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
    implementation "com.github.wendykierp:JTransforms:${jtransformsVersion}"
    implementation "com.google.guava:guava:${guavaVersion}"
    implementation "org.jboss.weld.se:weld-se-core:${weldVersion}"
    implementation "org.jfree:jfreechart:${jfreeChartVersion}"

    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    compileOnly "org.mapstruct:mapstruct:${mapStructVersion}"
    annotationProcessor "org.projectlombok:lombok-mapstruct-binding:${lombokMapStructBindingVersion}"
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapStructVersion}"

    testImplementation "org.junit.jupiter:junit-jupiter:${junitVersion}"
    testRuntimeOnly "org.junit.platform:junit-platform-launcher"
    testImplementation "org.assertj:assertj-core:${assertjVersion}"
    testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
    testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"
}

application {
    applicationDefaultJvmArgs = ['-XX:+UseZGC', '-XX:+ZGenerational', '-Xmx4G', '-XX:MaxDirectMemorySize=1G']
    mainClass = 'org.jboss.weld.environment.se.StartMain'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(javaVersion)
    }
}

sourceSets {
    main {
        java {
            // put resources in classes output
            output.resourcesDir = 'build/classes/java/main'
        }
    }
}

test {
    useJUnitPlatform()
    jvmArgs += ['--add-modules', 'jdk.incubator.vector']
}

tasks.withType(JavaCompile).configureEach {
    options.compilerArgs += ['--add-modules', 'jdk.incubator.vector']
}

tasks.withType(JavaExec).configureEach {
    jvmArgs += ['--add-modules', 'jdk.incubator.vector']
}
